MS2.java---

import java.io.IOException;  
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;

class MS2 { 
    public static void main(String argv[]) throws Exception { 
        DatagramSocket serverSocket = new DatagramSocket(6789);
        System.out.println("UDP Math Server is running on port 6789...");

        byte[] receiveBuffer = new byte[1024];
        byte[] sendBuffer;    
        DatagramPacket sendPacket; 
        
        while (true) {  
            DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
            serverSocket.receive(receivePacket);
            InetAddress clientAddress = receivePacket.getAddress();
            int clientPort = receivePacket.getPort();
            
           

            while (true) {

                // Send menu after receiving initial request
                sendBuffer = "Select 1 to add, 2 to subtract, 3 to multiply, 4 to exit.\n".getBytes();
                sendPacket = new DatagramPacket(sendBuffer, sendBuffer.length, clientAddress, clientPort);
                serverSocket.send(sendPacket);

                System.out.println("Waiting for client choice...");
                receiveBuffer = new byte[1024]; // Clear buffer
                receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
                serverSocket.receive(receivePacket);
                String choiceStr = new String(receivePacket.getData(), 0, receivePacket.getLength());

                int choice;
                try {
                    choice = Integer.parseInt(choiceStr);
                } catch (NumberFormatException e) {
                    sendBuffer = "Invalid input. Please enter a number.\n".getBytes();
                    sendPacket = new DatagramPacket(sendBuffer, sendBuffer.length, clientAddress, clientPort);
                    serverSocket.send(sendPacket);
                    continue;
                }

                // Exit condition
                if (choice == 4) {
                    System.out.println("Client exited.");
                    break;  // Instead of terminating, just break out of the inner loop
                }

                // Check if choice is valid
                if (choice < 1 || choice > 3) {
                    sendBuffer = "Invalid choice. Try again.\n".getBytes();
                    sendPacket = new DatagramPacket(sendBuffer, sendBuffer.length, clientAddress, clientPort);
                    serverSocket.send(sendPacket);
                    continue;
                }

                // Ask for operands
                sendBuffer = "Enter operands (separated by space):\n".getBytes();
                sendPacket = new DatagramPacket(sendBuffer, sendBuffer.length, clientAddress, clientPort);
                serverSocket.send(sendPacket);
                System.out.println("Waiting for operands...");

                receiveBuffer = new byte[1024]; // Clear buffer
                receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
                serverSocket.receive(receivePacket);
                String operandStr = new String(receivePacket.getData(), 0, receivePacket.getLength());

                String[] operands = operandStr.split(" ");

                if (operands.length < 2) {
                    sendBuffer = "Error: Enter at least two numbers.\n".getBytes();
                    sendPacket = new DatagramPacket(sendBuffer, sendBuffer.length, clientAddress, clientPort);
                    serverSocket.send(sendPacket);
                    continue;
                }

                double result;
                try {
                    result = Double.parseDouble(operands[0]); // Initialize with first operand
                    
                    // Process based on operation
                    switch (choice) {
                        case 1: // Addition
                            for (int i = 1; i < operands.length; i++) {
                                result += Double.parseDouble(operands[i]);
                            }
                            break;
                        case 2: // Subtraction
                            for (int i = 1; i < operands.length; i++) {
                                result -= Double.parseDouble(operands[i]);
                            }
                            break;
                        case 3: // Multiplication
                            for (int i = 1; i < operands.length; i++) {
                                result *= Double.parseDouble(operands[i]);
                            }
                            break;
                    }
                } catch (NumberFormatException e) {
                    sendBuffer = "Error: Invalid number format.\n".getBytes();
                    sendPacket = new DatagramPacket(sendBuffer, sendBuffer.length, clientAddress, clientPort);
                    serverSocket.send(sendPacket);
                    continue;
                }

                // Send result to client
                System.out.println("Computed Result: " + result);
                String resultMessage = "Result: " + result;
                        
                sendBuffer = resultMessage.getBytes();
                sendPacket = new DatagramPacket(sendBuffer, sendBuffer.length, clientAddress, clientPort);
                serverSocket.send(sendPacket);
            }
        }
    }
}


MC2.java---

import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.Scanner;

class MC2 { 
    public static void main(String argv[]) throws Exception { 
        DatagramSocket clientSocket = new DatagramSocket();
        InetAddress serverAddress = InetAddress.getByName("localhost");
        Scanner scanner = new Scanner(System.in);

        byte[] receiveBuffer = new byte[1024];
        byte[] sendBuffer;
        DatagramPacket sendPacket;
        DatagramPacket receivePacket; 

        // Send initial request to trigger server response
        sendBuffer = "Hello Server".getBytes();
        sendPacket = new DatagramPacket(sendBuffer, sendBuffer.length, serverAddress, 6789);
        clientSocket.send(sendPacket);

        while (true) { 
            // Read menu from server
            receiveBuffer = new byte[1024]; // Clear buffer
            receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
            clientSocket.receive(receivePacket);
            String menu = new String(receivePacket.getData(), 0, receivePacket.getLength());

            System.out.println(menu);

            // Get user choice
            System.out.print("Enter choice: ");
            String choice = scanner.nextLine();
            sendBuffer = choice.getBytes();
            sendPacket = new DatagramPacket(sendBuffer, sendBuffer.length, serverAddress, 6789);
            clientSocket.send(sendPacket);

            // Exit condition
            if (choice.equals("4")) {
                System.out.println("Exiting client...");
                break;
            }

            // Read server response for operands
            receiveBuffer = new byte[1024]; // Clear buffer
            receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
            clientSocket.receive(receivePacket);
            String prompt = new String(receivePacket.getData(), 0, receivePacket.getLength());
            System.out.println(prompt);

            // Get operands
            //System.out.print("Enter operands (separated by space): ");
            String operands = scanner.nextLine();
            sendBuffer = operands.getBytes();
            sendPacket = new DatagramPacket(sendBuffer, sendBuffer.length, serverAddress, 6789);
            clientSocket.send(sendPacket);

            // Read result from server
            receiveBuffer = new byte[1024]; // Clear buffer
            receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
            clientSocket.receive(receivePacket);
            String result = new String(receivePacket.getData(), 0, receivePacket.getLength());
            System.out.println(result);
        }

        clientSocket.close();
        scanner.close();
    }
}


OUTPUT--
SERVER--

PS C:\Users\Arpita Nath\Desktop\j> javac MS2.java MC2.java
PS C:\Users\Arpita Nath\Desktop\j> java MS2
UDP Math Server is running on port 6789...
Waiting for client choice...
Waiting for operands...
Computed Result: 3.0
Waiting for client choice...
Waiting for operands...
Computed Result: -1.0
Waiting for client choice...
Waiting for operands...
Computed Result: 2.0
Waiting for client choice...
Client exited.


CLIENT---

PS C:\Users\Arpita Nath\Desktop\j> java MC2
Select 1 to add, 2 to subtract, 3 to multiply, 4 to exit.

Enter choice: 1
Enter operands (separated by space):

1 1 1
Result: 3.0
Select 1 to add, 2 to subtract, 3 to multiply, 4 to exit.

Enter choice: 2
Enter operands (separated by space):

1 1 1
Result: -1.0
Select 1 to add, 2 to subtract, 3 to multiply, 4 to exit.

Enter choice: 3
Enter operands (separated by space):

1 2 1
Result: 2.0
Select 1 to add, 2 to subtract, 3 to multiply, 4 to exit.

Enter choice: 4
Exiting client...
PS C:\Users\Arpita Nath\Desktop\j> 